// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TouristAgency.Data;

#nullable disable

namespace TouristAgency.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240323113337_Added_Columns")]
    partial class Added_Columns
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MongoDbModels.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Activity identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)")
                        .HasComment("Description of activity");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Shows if the activity is currently available for the tour");

                    b.Property<int>("MinPeopleNeeded")
                        .HasColumnType("int")
                        .HasComment("Minumum amount of people needed for the activity to be made");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Name of activity");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of activity");

                    b.Property<int>("TourId")
                        .HasColumnType("int")
                        .HasComment("Tour identifier");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("Activities");

                    b.HasComment("This entity shows the activiy made in the tour");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.ActivityBookedOrganizedHoliday", b =>
                {
                    b.Property<int>("ActivityId")
                        .HasColumnType("int")
                        .HasComment("Activity identifier");

                    b.Property<int>("BookedOrganizedHolidayId")
                        .HasColumnType("int")
                        .HasComment("BookedOrganizedHoliday identifier");

                    b.HasKey("ActivityId", "BookedOrganizedHolidayId");

                    b.HasIndex("BookedOrganizedHolidayId");

                    b.ToTable("ActivitiesBookedOrganizedHolidays");

                    b.HasComment("This entity gives info about what activities are booked for the trip");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.AdditionalPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("AdditionalPerson identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasComment("Booking identifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("First name of additonal person");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Last name of additonal person");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("AdditionalPeople");

                    b.HasComment("This entity shows information about additional people signed for a booking");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasComment("Extended IdentityRole");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("First name of user");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Last name of user");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasComment("Extended IdentityUser");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.BookedCruise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("BookedCruise identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CruiseId")
                        .HasColumnType("int")
                        .HasComment("Cruise identifier");

                    b.HasKey("Id");

                    b.HasIndex("CruiseId");

                    b.ToTable("BookedCruises");

                    b.HasComment("This entity shows the booked cruise with the number of booked rooms");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.BookedOrganizedHoliday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("BookedOrganizedHoliday identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrganizedHolidayStartAndEndDateId")
                        .HasColumnType("int")
                        .HasComment("OrganizedHolidayStartAndEndDate identifier");

                    b.HasKey("Id");

                    b.HasIndex("OrganizedHolidayStartAndEndDateId");

                    b.ToTable("BookedOrganizedHolidays");

                    b.HasComment("this entity shows the date, room type and signed activities for the trip");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.BookedOrganizedHolidayRoomType", b =>
                {
                    b.Property<int>("BookedOrganizedHolidayId")
                        .HasColumnType("int")
                        .HasComment("BookedOrganizedHoliday identifier");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int")
                        .HasComment("RoopType identifier");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasComment("Number of booked rooms of current room type");

                    b.HasKey("BookedOrganizedHolidayId", "RoomTypeId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("BookedOrganizedHolidaysRoomTypes");

                    b.HasComment("This entity shows how many rooms were booked for a trip");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Booking identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BookedCruiseId")
                        .HasColumnType("int");

                    b.Property<int?>("BookedOrganizedHolidayId")
                        .HasColumnType("int");

                    b.Property<Guid>("BookerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the person who makes the booking");

                    b.Property<int>("BookingStatus")
                        .HasColumnType("int")
                        .HasComment("Shows current status of the booking");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Discriminator column which will show what kind of trip has been booked(OrganizedHoliday, UnorganizedHoliday, Cruise)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasComment("Payment identifier");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int")
                        .HasComment("Shows if booking was payed or not");

                    b.Property<DateTime>("TimeOfBooking")
                        .HasColumnType("datetime2")
                        .HasComment("Exact time of booking the trip");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total price of the trip");

                    b.Property<int>("TripId")
                        .HasColumnType("int")
                        .HasComment("identifier of trip which shows details about the booking");

                    b.Property<int?>("UnorganizedHolidayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookedCruiseId");

                    b.HasIndex("BookedOrganizedHolidayId");

                    b.HasIndex("BookerId");

                    b.HasIndex("UnorganizedHolidayId");

                    b.ToTable("Bookings");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BookedCruise");

                    b.HasComment("This entity shows the whole information about a booking");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Continent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Continent table identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Continent name");

                    b.HasKey("Id");

                    b.ToTable("Continents");

                    b.HasComment("Table about continents we make trips in");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Country identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContinentId")
                        .HasColumnType("int")
                        .HasComment("Continent identifier of country");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Country name");

                    b.HasKey("Id");

                    b.HasIndex("ContinentId");

                    b.ToTable("Countries");

                    b.HasComment("Countries that we make trips in");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Cruise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Cruise identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Description of cruise");

                    b.Property<DateTime>("EmbarkDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date on which the cruise embarks");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Shows if the cruise is available");

                    b.Property<int>("MaxPeople")
                        .HasColumnType("int")
                        .HasComment("Maximum people which the agency can take");

                    b.Property<int>("MinPeopleNeeded")
                        .HasColumnType("int")
                        .HasComment("Minumum people needed for the agency to make this trip happen");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of cruise");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of services in cruiuse excluding room price");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date on whic the cruise returns");

                    b.HasKey("Id");

                    b.ToTable("Cruises");

                    b.HasComment("This table shows cruises the agency has to offer");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.CruiseDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("CruiseDay identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CruiseId")
                        .HasColumnType("int")
                        .HasComment("Cruise identifier");

                    b.Property<int>("DayNumber")
                        .HasColumnType("int")
                        .HasComment("Number of day");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)")
                        .HasComment("Description of current day");

                    b.HasKey("Id");

                    b.HasIndex("CruiseId");

                    b.ToTable("CruiseDays");

                    b.HasComment("This entity shows the description of a single day in a cruise vacation");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.CruiseDestination", b =>
                {
                    b.Property<int>("CruiseId")
                        .HasColumnType("int")
                        .HasComment("Cruise identifier");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int")
                        .HasComment("Destination identifier");

                    b.HasKey("CruiseId", "DestinationId");

                    b.HasIndex("DestinationId");

                    b.ToTable("CruisesDestinations");

                    b.HasComment("This table shows the destination through which cruises pass by");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.CruiseRoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("CruiseRoomType identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasComment("Description of CruiseRoomType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of room type in cruise");

                    b.HasKey("Id");

                    b.ToTable("CruiseRoomTypes");

                    b.HasComment("This table shows what kind of rooms there are in a cruise");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.CruiseRoomTypeBookedCruise", b =>
                {
                    b.Property<int>("CruiseRoomTypeId")
                        .HasColumnType("int")
                        .HasComment("CruiseRoomType identifier");

                    b.Property<int>("BookedCruiseId")
                        .HasColumnType("int")
                        .HasComment("BookedCruise identifier");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasComment("Number of booked rooms of current room type");

                    b.HasKey("CruiseRoomTypeId", "BookedCruiseId");

                    b.HasIndex("BookedCruiseId");

                    b.ToTable("CruiseRoomTypesBookedCruises");

                    b.HasComment("This entity shows how many rooms were booked for a give cruise");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.CruiseRoomTypeCruisePrice", b =>
                {
                    b.Property<int>("CruiseRoomTypeId")
                        .HasColumnType("int")
                        .HasComment("CruiseRoomTypeIdentifier");

                    b.Property<int>("CruiseId")
                        .HasColumnType("int")
                        .HasComment("Cruise identifier");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of room per night");

                    b.HasKey("CruiseRoomTypeId", "CruiseId");

                    b.HasIndex("CruiseId");

                    b.ToTable("CruiseRoomTypesCruisesPrices");

                    b.HasComment("This table shows the price of room in a cruise");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Destination identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasComment("Country identifier of destination");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasComment("Description of destination");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Name of destination");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Destinations");

                    b.HasComment("This table shows the destinations in which we make trips");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Hotel identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Shows exact location of the hotel");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Name of Hotel");

                    b.Property<int>("OfferId")
                        .HasColumnType("int")
                        .HasComment("Offer identifier, shows the current hotel for what offer is used");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.ToTable("Hotels");

                    b.HasComment("This table shows what hotels the agency has to present for a given offer");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.HotelRoomTypePrice", b =>
                {
                    b.Property<int>("HotelId")
                        .HasColumnType("int")
                        .HasComment("Hotel identifier");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int")
                        .HasComment("RoomType identifier");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of a roomType in a given hotel");

                    b.HasKey("HotelId", "RoomTypeId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("HotelsRoomTypesPrices");

                    b.HasComment("This table shows the price of a RoomType in a given hotel");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Offer identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("CanBeUnorganized")
                        .HasColumnType("bit")
                        .HasComment("Checks if the offer can be booked customly by the user");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int")
                        .HasComment("Identifier of destination in which is the offer");

                    b.Property<float?>("Discount")
                        .HasColumnType("real")
                        .HasComment("Discount of offer available to only special users");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Checks if the offer is available for booking");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("Name of offer");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId")
                        .IsUnique();

                    b.ToTable("Offers");

                    b.HasComment("This table shows what we offer for a given destination");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.OfferTransportTypePrice", b =>
                {
                    b.Property<int>("OfferId")
                        .HasColumnType("int")
                        .HasComment("Offer identifier");

                    b.Property<int>("TransportTypeId")
                        .HasColumnType("int")
                        .HasComment("TransportType identifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of transport in given offer");

                    b.HasKey("OfferId", "TransportTypeId");

                    b.HasIndex("TransportTypeId");

                    b.ToTable("OffersTransportTypesPrices");

                    b.HasComment("This table shows the prices of different transports in different offers");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.OrganizedHoliday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("OrganizedHoliday identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DayOneDescription")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)")
                        .HasComment("Description of the first day of the trip");

                    b.Property<int>("HotelId")
                        .HasColumnType("int")
                        .HasComment("Hotel identifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Shows if the organized holiday is available or not");

                    b.Property<string>("LastDayDescription")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)")
                        .HasComment("Description of the last day of the trip");

                    b.Property<int>("MaxPeople")
                        .HasColumnType("int")
                        .HasComment("Max people which can go to the organized holiday");

                    b.Property<int>("MinPeopleNeeded")
                        .HasColumnType("int")
                        .HasComment("Minumum people needed for the organized holiday to be made");

                    b.Property<int>("OfferId")
                        .HasColumnType("int")
                        .HasComment("Offer identifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of OrganizedHoliday, it includes the hotel services price(excluding room price) and transport price. It does not include activities price");

                    b.Property<int>("TourId")
                        .HasColumnType("int")
                        .HasComment("Tour identifier");

                    b.Property<int>("TransportTypeId")
                        .HasColumnType("int")
                        .HasComment("TransportType identifier");

                    b.HasKey("Id");

                    b.HasIndex("HotelId")
                        .IsUnique();

                    b.HasIndex("OfferId")
                        .IsUnique();

                    b.HasIndex("TourId")
                        .IsUnique();

                    b.HasIndex("TransportTypeId");

                    b.ToTable("OrganizedHolidays");

                    b.HasComment("This entity represents a trip which is organized by the agency");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.OrganizedHolidayStartAndEndDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("OrganizedHolidayStartAndEndDate identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of coming back from the trip");

                    b.Property<int>("OrganizedHolidayId")
                        .HasColumnType("int")
                        .HasComment("OrganizedHoliday identifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of setting off for the trip");

                    b.HasKey("Id");

                    b.HasIndex("OrganizedHolidayId");

                    b.ToTable("OrganizedHolidayStartAndEndDates");

                    b.HasComment("This entity contains the start and end date of an organizedHoliday");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Payment identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Paid amount");

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasComment("Booking identifier");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of payment");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int")
                        .HasComment("Method of paying(cash or debit card)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payments");

                    b.HasComment("This entity shows payment details");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Review identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasComment("Content of review");

                    b.Property<int?>("CruiseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfWriting")
                        .HasColumnType("datetime2")
                        .HasComment("Date of writing the review");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Discriminator which will signalize which navigation property should be filled");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewedTripId")
                        .HasColumnType("int")
                        .HasComment("Identifier of trip which was reviewed");

                    b.Property<Guid?>("ReviewerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of user who wrote the review(could be anonymous)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Title of review");

                    b.HasKey("Id");

                    b.HasIndex("CruiseId");

                    b.HasIndex("OfferId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Reviews");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Cruise");

                    b.HasComment("Review written by an user about a trip");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("RoomType identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasComment("Description of RoomType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of RoomType");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasComment("This table shows what kind of rooms the agency can offer");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Tour identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasComment("Description of tour");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Name of tour");

                    b.HasKey("Id");

                    b.ToTable("Tours");

                    b.HasComment("This entity shows the tour conducted in the given trip");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.TransportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("TransportType identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of transport");

                    b.HasKey("Id");

                    b.ToTable("TransportTypes");

                    b.HasComment("This table shows what type of transport is availabe for a specific offer");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.UnorganizedHoliday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("UnorganizedHoliday identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of checking in the booked hotel");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of checking out the booked hotel");

                    b.Property<int>("HotelId")
                        .HasColumnType("int")
                        .HasComment("Hotel identifier for hotel in which the user(s) will be staying in");

                    b.Property<int>("OfferId")
                        .HasColumnType("int")
                        .HasComment("Offer identifier related to current unorganizedHoliday");

                    b.Property<int?>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TransportTypeId")
                        .HasColumnType("int")
                        .HasComment("TransportType identifier");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("OfferId")
                        .IsUnique();

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("TransportTypeId");

                    b.ToTable("UnorganizedHolidays");

                    b.HasComment("These are holidays which don't have tours organized by the agency and the user chooses where to stay, when to go and what to do");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.UnorganizedHolidayRoomType", b =>
                {
                    b.Property<int>("UnorganizedHolidayId")
                        .HasColumnType("int")
                        .HasComment("UnorganizedHoliday identifier");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int")
                        .HasComment("RoopType identifier");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasComment("Number of booked rooms of current room type");

                    b.HasKey("UnorganizedHolidayId", "RoomTypeId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("UnorganizedHolidaysRoomTypes");

                    b.HasComment("This entity shows how many rooms were booked for a certain trip");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MongoDbModels.Image", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Review", null)
                        .WithMany("Images")
                        .HasForeignKey("ReviewId");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Activity", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Tour", "Tour")
                        .WithMany("Activities")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.ActivityBookedOrganizedHoliday", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Activity", "Activity")
                        .WithMany("ActivitiesBookedOrganizedHolidays")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.BookedOrganizedHoliday", "BookedOrganizedHoliday")
                        .WithMany("ActivitiesBookedOrganizedHolidays")
                        .HasForeignKey("BookedOrganizedHolidayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("BookedOrganizedHoliday");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.AdditionalPerson", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Booking", "Booking")
                        .WithMany("AdditionalPeople")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.BookedCruise", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Cruise", "Cruise")
                        .WithMany("BookedCruises")
                        .HasForeignKey("CruiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cruise");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.BookedOrganizedHoliday", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.OrganizedHolidayStartAndEndDate", "OrganizedHolidayStartAndEndDate")
                        .WithMany("BookedOrganizedHolidays")
                        .HasForeignKey("OrganizedHolidayStartAndEndDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizedHolidayStartAndEndDate");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.BookedOrganizedHolidayRoomType", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.BookedOrganizedHoliday", "BookedOrganizedHoliday")
                        .WithMany("BookedOrganzedHolidaysRoomTypes")
                        .HasForeignKey("BookedOrganizedHolidayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.RoomType", "RoomType")
                        .WithMany("BookedOrganzedHolidaysRoomTypes")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookedOrganizedHoliday");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Booking", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.BookedCruise", "BookedCruise")
                        .WithMany()
                        .HasForeignKey("BookedCruiseId");

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.BookedOrganizedHoliday", "BookedOrganizedHoliday")
                        .WithMany()
                        .HasForeignKey("BookedOrganizedHolidayId");

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("BookerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.UnorganizedHoliday", "UnorganizedHoliday")
                        .WithMany()
                        .HasForeignKey("UnorganizedHolidayId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("BookedCruise");

                    b.Navigation("BookedOrganizedHoliday");

                    b.Navigation("UnorganizedHoliday");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Country", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Continent", "Continent")
                        .WithMany("Countries")
                        .HasForeignKey("ContinentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Continent");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.CruiseDay", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Cruise", "Cruise")
                        .WithMany("CruiseDays")
                        .HasForeignKey("CruiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cruise");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.CruiseDestination", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Cruise", "Cruise")
                        .WithMany("CruisesDestinations")
                        .HasForeignKey("CruiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Destination", "Destination")
                        .WithMany("CruisesDestinations")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cruise");

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.CruiseRoomTypeBookedCruise", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.BookedCruise", "BookedCruise")
                        .WithMany("CruiseRoomTypesBookedCruises")
                        .HasForeignKey("BookedCruiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.CruiseRoomType", "CruiseRoomType")
                        .WithMany("CruiseRoomTypesBookedCruises")
                        .HasForeignKey("CruiseRoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookedCruise");

                    b.Navigation("CruiseRoomType");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.CruiseRoomTypeCruisePrice", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Cruise", "Cruise")
                        .WithMany("CruiseRoomTypesCruisesPrices")
                        .HasForeignKey("CruiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.CruiseRoomType", "CruiseRoomType")
                        .WithMany("CruiseRoomTypesCruisesPrices")
                        .HasForeignKey("CruiseRoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cruise");

                    b.Navigation("CruiseRoomType");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Destination", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Country", "Country")
                        .WithMany("Destinations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Hotel", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Offer", "Offer")
                        .WithMany("Hotels")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.HotelRoomTypePrice", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Hotel", "Hotel")
                        .WithMany("HotelsRoomTypesPrices")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.RoomType", "RoomType")
                        .WithMany("HotelsRoomTypesPrices")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Offer", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Destination", "Destination")
                        .WithOne("Offer")
                        .HasForeignKey("TouristAgency.Infrastructure.Data.Models.MssqlModels.Offer", "DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.OfferTransportTypePrice", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Offer", "Offer")
                        .WithMany("OffersTransportTypesPrices")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.TransportType", "TransportType")
                        .WithMany("OffersTransportTypesPrices")
                        .HasForeignKey("TransportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("TransportType");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.OrganizedHoliday", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Hotel", "Hotel")
                        .WithOne("OrganizedHoliday")
                        .HasForeignKey("TouristAgency.Infrastructure.Data.Models.MssqlModels.OrganizedHoliday", "HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Offer", "Offer")
                        .WithOne("OrganizedHoliday")
                        .HasForeignKey("TouristAgency.Infrastructure.Data.Models.MssqlModels.OrganizedHoliday", "OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Tour", "Tour")
                        .WithOne("OrganizedHoliday")
                        .HasForeignKey("TouristAgency.Infrastructure.Data.Models.MssqlModels.OrganizedHoliday", "TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.TransportType", "TransportType")
                        .WithMany()
                        .HasForeignKey("TransportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("Offer");

                    b.Navigation("Tour");

                    b.Navigation("TransportType");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.OrganizedHolidayStartAndEndDate", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.OrganizedHoliday", "OrganizedHoliday")
                        .WithMany("OrganizedHolidayStartAndEndDates")
                        .HasForeignKey("OrganizedHolidayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizedHoliday");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Payment", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("TouristAgency.Infrastructure.Data.Models.MssqlModels.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Review", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Cruise", "Cruise")
                        .WithMany("Reviews")
                        .HasForeignKey("CruiseId");

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Offer", "Offer")
                        .WithMany("Reviews")
                        .HasForeignKey("OfferId");

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Cruise");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.UnorganizedHoliday", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.Offer", "Offer")
                        .WithOne("UnorganizedHoliday")
                        .HasForeignKey("TouristAgency.Infrastructure.Data.Models.MssqlModels.UnorganizedHoliday", "OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.RoomType", null)
                        .WithMany("UnorganizedHolidays")
                        .HasForeignKey("RoomTypeId");

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.TransportType", "TransportType")
                        .WithMany("UnorganizedHolidays")
                        .HasForeignKey("TransportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("Offer");

                    b.Navigation("TransportType");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.UnorganizedHolidayRoomType", b =>
                {
                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.RoomType", "RoomType")
                        .WithMany("UnorganizedHolidaysRoomTypes")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristAgency.Infrastructure.Data.Models.MssqlModels.UnorganizedHoliday", "UnorganizedHoliday")
                        .WithMany("UnorganizedHolidaysRoomTypes")
                        .HasForeignKey("UnorganizedHolidayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");

                    b.Navigation("UnorganizedHoliday");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Activity", b =>
                {
                    b.Navigation("ActivitiesBookedOrganizedHolidays");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.BookedCruise", b =>
                {
                    b.Navigation("CruiseRoomTypesBookedCruises");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.BookedOrganizedHoliday", b =>
                {
                    b.Navigation("ActivitiesBookedOrganizedHolidays");

                    b.Navigation("BookedOrganzedHolidaysRoomTypes");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Booking", b =>
                {
                    b.Navigation("AdditionalPeople");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Continent", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Country", b =>
                {
                    b.Navigation("Destinations");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Cruise", b =>
                {
                    b.Navigation("BookedCruises");

                    b.Navigation("CruiseDays");

                    b.Navigation("CruiseRoomTypesCruisesPrices");

                    b.Navigation("CruisesDestinations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.CruiseRoomType", b =>
                {
                    b.Navigation("CruiseRoomTypesBookedCruises");

                    b.Navigation("CruiseRoomTypesCruisesPrices");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Destination", b =>
                {
                    b.Navigation("CruisesDestinations");

                    b.Navigation("Offer")
                        .IsRequired();
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Hotel", b =>
                {
                    b.Navigation("HotelsRoomTypesPrices");

                    b.Navigation("OrganizedHoliday");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Offer", b =>
                {
                    b.Navigation("Hotels");

                    b.Navigation("OffersTransportTypesPrices");

                    b.Navigation("OrganizedHoliday")
                        .IsRequired();

                    b.Navigation("Reviews");

                    b.Navigation("UnorganizedHoliday");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.OrganizedHoliday", b =>
                {
                    b.Navigation("OrganizedHolidayStartAndEndDates");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.OrganizedHolidayStartAndEndDate", b =>
                {
                    b.Navigation("BookedOrganizedHolidays");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Review", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.RoomType", b =>
                {
                    b.Navigation("BookedOrganzedHolidaysRoomTypes");

                    b.Navigation("HotelsRoomTypesPrices");

                    b.Navigation("UnorganizedHolidays");

                    b.Navigation("UnorganizedHolidaysRoomTypes");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.Tour", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("OrganizedHoliday")
                        .IsRequired();
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.TransportType", b =>
                {
                    b.Navigation("OffersTransportTypesPrices");

                    b.Navigation("UnorganizedHolidays");
                });

            modelBuilder.Entity("TouristAgency.Infrastructure.Data.Models.MssqlModels.UnorganizedHoliday", b =>
                {
                    b.Navigation("UnorganizedHolidaysRoomTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
